-- Departmanlar tablosu
CREATE TABLE Departmanlar (
    departmanID NUMBER PRIMARY KEY,
    departmanAdi VARCHAR2(50)
);

-- Personel tablosu
CREATE TABLE Personel (
    personelID NUMBER PRIMARY KEY,
    adi VARCHAR2(50),
    soyadi VARCHAR2(50),
    dogumTarihi DATE,
    cinsiyet VARCHAR2(10),
    topalmYillikIzinHakki NUMBER,
    mevcutMaas NUMBER,
    departmanID NUMBER REFERENCES Departmanlar(departmanID)
);

-- PersonelBankaHesaplari tablosu
CREATE TABLE PersonelBankaHesaplari (
    hesapID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    bankaAdi VARCHAR2(50),
    hesapNumarasi VARCHAR2(20),
    subeAdi VARCHAR2(50)
);

-- MaasZamlari tablosu
CREATE TABLE MaasZamlari (
    zammID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    miktar NUMBER,
    tarih DATE
);

-- MaasOdeme tablosu
CREATE TABLE MaasOdeme (
    maasID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    miktar NUMBER,
    tarih DATE
);

-- Avans tablosu
CREATE TABLE Avans (
    avansID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    miktar NUMBER,
    tarih DATE
);

-- Izinler tablosu
CREATE TABLE Izinler (
    izinID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    ucretliMi CHAR(1),
    baslangicTarihi DATE,
    bitisTarihi DATE,
    izinTuru VARCHAR2(50)
);

CREATE TABLE CalismaSaatleri (
    calismaID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    calismaTarihi DATE,
    calismaSaati NUMBER
);

-- Sigorta tablosu
CREATE TABLE Sigorta (
    sigortaID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    sigortaTuru VARCHAR2(50),
    sigortaBaslangicTarihi DATE,
    sigortaBitisTarihi DATE,
    primTutari NUMBER,
    poliçeNumarasi VARCHAR2(20)
);

-- YillikIzinler tablosu
CREATE TABLE YillikIzinler (
    izinID NUMBER PRIMARY KEY,
    personelID NUMBER REFERENCES Personel(personelID),
    baslangicTarihi DATE,
    bitisTarihi DATE,
    onayDurumu VARCHAR2(20)
);


-- Departmanlar tablosu
INSERT INTO Departmanlar (departmanID, departmanAdi)
VALUES (1, 'Muhasebe');

INSERT INTO Departmanlar (departmanID, departmanAdi)
VALUES (2, 'Satış');

-- Personel tablosu
INSERT INTO Personel (personelID, adi, soyadi, dogumTarihi, cinsiyet, departmanID, topalmYillikIzinHakki, mevcutMaas)
VALUES (1, 'Ahmet', 'Yılmaz', TO_DATE('1990-05-15', 'YYYY-MM-DD'), 'Erkek', 1, 20, 4000);

INSERT INTO Personel (personelID, adi, soyadi, dogumTarihi, cinsiyet, departmanID, topalmYillikIzinHakki, mevcutMaas)
VALUES (2, 'Ayşe', 'Demir', TO_DATE('1985-08-22', 'YYYY-MM-DD'), 'Kadın', 2, 18, 5000);

-- PersonelBankaHesaplari tablosu
INSERT INTO PersonelBankaHesaplari (hesapID, personelID, bankaAdi, hesapNumarasi, subeAdi)
VALUES (1, 1, 'Ziraat Bankası', '123456789', 'Ankara Şubesi');

INSERT INTO PersonelBankaHesaplari (hesapID, personelID, bankaAdi, hesapNumarasi, subeAdi)
VALUES (2, 2, 'Garanti Bankası', '987654321', 'İstanbul Şubesi');

-- MaasZamlari tablosu
INSERT INTO MaasZamlari (zammID, personelID, miktar, tarih)
VALUES (1, 1, 500, TO_DATE('2024-01-01', 'YYYY-MM-DD'));

INSERT INTO MaasZamlari (zammID, personelID, miktar, tarih)
VALUES (2, 2, 600, TO_DATE('2024-01-05', 'YYYY-MM-DD'));

-- MaasOdeme tablosu
INSERT INTO MaasOdeme (maasID, personelID, miktar, tarih)
VALUES (1, 1, 4000, TO_DATE('2024-01-15', 'YYYY-MM-DD'));

INSERT INTO MaasOdeme (maasID, personelID, miktar, tarih)
VALUES (2, 2, 4500, TO_DATE('2024-01-20', 'YYYY-MM-DD'));

-- Avans tablosu
INSERT INTO Avans (avansID, personelID, miktar, tarih)
VALUES (1, 1, 1000, TO_DATE('2024-01-10', 'YYYY-MM-DD'));

INSERT INTO Avans (avansID, personelID, miktar, tarih)
VALUES (2, 2, 800, TO_DATE('2024-01-12', 'YYYY-MM-DD'));

-- Izinler tablosu
INSERT INTO Izinler (izinID, personelID, ucretliMi, baslangicTarihi, bitisTarihi)
VALUES (1, 1, 'Y', TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-02-05', 'YYYY-MM-DD'));

INSERT INTO Izinler (izinID, personelID, ucretliMi, baslangicTarihi, bitisTarihi)
VALUES (2, 2, 'N', TO_DATE('2024-02-10', 'YYYY-MM-DD'), TO_DATE('2024-02-15', 'YYYY-MM-DD'));

-- CalismaSaatleri tablosu
INSERT INTO CalismaSaatleri (calismaID, personelID, calismaTarihi, calismaSaati)
VALUES (1, 1, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 8);

INSERT INTO CalismaSaatleri (calismaID, personelID, calismaTarihi, calismaSaati)
VALUES (2, 2, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 7);

-- Sigorta tablosu
INSERT INTO Sigorta (sigortaID, personelID, sigortaTuru, sigortaBaslangicTarihi, sigortaBitisTarihi, primTutari, poliçeNumarasi)
VALUES (1, 1, 'Sağlık Sigortası', TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2025-01-01', 'YYYY-MM-DD'), 200, 'ABC123');

INSERT INTO Sigorta (sigortaID, personelID, sigortaTuru, sigortaBaslangicTarihi, sigortaBitisTarihi, primTutari, poliçeNumarasi)
VALUES (2, 2, 'İşsizlik Sigortası', TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD'), 150, 'XYZ789');

-- YillikIzinler tablosu
INSERT INTO YillikIzinler (izinID, personelID, baslangicTarihi, bitisTarihi, onayDurumu)
VALUES (1, 1, TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-06-10', 'YYYY-MM-DD'), 'Onaylandı');

INSERT INTO YillikIzinler (izinID, personelID, baslangicTarihi, bitisTarihi, onayDurumu)
VALUES (2, 2, TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-07-07', 'YYYY-MM-DD'), 'Onaylandı');


-- Personel tablosu
INSERT INTO Personel (personelID, adi, soyadi, dogumTarihi, cinsiyet, departmanID, topalmYillikIzinHakki, mevcutMaas)
VALUES (3, 'Mehmet', 'Demir', TO_DATE('1988-11-18', 'YYYY-MM-DD'), 'Erkek', 1, 15, 6000);

INSERT INTO Personel (personelID, adi, soyadi, dogumTarihi, cinsiyet, departmanID, topalmYillikIzinHakki, mevcutMaas)
VALUES (4, 'Zeynep', 'Kaya', TO_DATE('1995-07-25', 'YYYY-MM-DD'), 'Kadın', 2, 17, 9000);

-- PersonelBankaHesaplari tablosu
INSERT INTO PersonelBankaHesaplari (hesapID, personelID, bankaAdi, hesapNumarasi, subeAdi)
VALUES (3, 3, 'Akbank', '567890123', 'İzmir Şubesi');

INSERT INTO PersonelBankaHesaplari (hesapID, personelID, bankaAdi, hesapNumarasi, subeAdi)
VALUES (4, 4, 'Yapı Kredi', '987654321', 'Ankara Şubesi');

-- MaasZamlari tablosu
INSERT INTO MaasZamlari (zammID, personelID, miktar, tarih)
VALUES (3, 3, 700, TO_DATE('2024-01-20', 'YYYY-MM-DD'));

INSERT INTO MaasZamlari (zammID, personelID, miktar, tarih)
VALUES (4, 4, 800, TO_DATE('2024-01-25', 'YYYY-MM-DD'));

-- MaasOdeme tablosu
INSERT INTO MaasOdeme (maasID, personelID, miktar, tarih)
VALUES (3, 3, 4500, TO_DATE('2024-01-28', 'YYYY-MM-DD'));

INSERT INTO MaasOdeme (maasID, personelID, miktar, tarih)
VALUES (4, 4, 5000, TO_DATE('2024-01-30', 'YYYY-MM-DD'));

-- Avans tablosu
INSERT INTO Avans (avansID, personelID, miktar, tarih)
VALUES (3, 3, 1200, TO_DATE('2024-01-15', 'YYYY-MM-DD'));

INSERT INTO Avans (avansID, personelID, miktar, tarih)
VALUES (4, 4, 900, TO_DATE('2024-01-18', 'YYYY-MM-DD'));

-- Izinler tablosu
INSERT INTO Izinler (izinID, personelID, ucretliMi, baslangicTarihi, bitisTarihi)
VALUES (3, 3, 'Y', TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-03-05', 'YYYY-MM-DD'));

INSERT INTO Izinler (izinID, personelID, ucretliMi, baslangicTarihi, bitisTarihi)
VALUES (4, 4, 'N', TO_DATE('2024-03-10', 'YYYY-MM-DD'), TO_DATE('2024-03-15', 'YYYY-MM-DD'));

-- CalismaSaatleri tablosu
INSERT INTO CalismaSaatleri (calismaID, personelID, calismaTarihi, calismaSaati)
VALUES (3, 3, TO_DATE('2024-03-01', 'YYYY-MM-DD'), 6);

INSERT INTO CalismaSaatleri (calismaID, personelID, calismaTarihi, calismaSaati)
VALUES (4, 4, TO_DATE('2024-03-01', 'YYYY-MM-DD'), 7);

-- Sigorta tablosu
INSERT INTO Sigorta (sigortaID, personelID, sigortaTuru, sigortaBaslangicTarihi, sigortaBitisTarihi, primTutari, poliçeNumarasi)
VALUES (3, 3, 'Kaza Sigortası', TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD'), 250, 'KZ123');

INSERT INTO Sigorta (sigortaID, personelID, sigortaTuru, sigortaBaslangicTarihi, sigortaBitisTarihi, primTutari, poliçeNumarasi)
VALUES (4, 4, 'Hayat Sigortası', TO_DATE('2024-02-15', 'YYYY-MM-DD'), TO_DATE('2025-02-15', 'YYYY-MM-DD'), 300, 'HY456');

-- YillikIzinler tablosu
INSERT INTO YillikIzinler (izinID, personelID, baslangicTarihi, bitisTarihi, onayDurumu)
VALUES (3, 3, TO_DATE('2024-08-01', 'YYYY-MM-DD'), TO_DATE('2024-08-10', 'YYYY-MM-DD'), 'Onaylandı');

INSERT INTO YillikIzinler (izinID, personelID, baslangicTarihi, bitisTarihi, onayDurumu)
VALUES (4, 4, TO_DATE('2024-09-01', 'YYYY-MM-DD'), TO_DATE('2024-09-07', 'YYYY-MM-DD'), 'Onaylandı');



SELECT
    P.personelID,
    P.adi,
    P.soyadi,
    P.mevcutMaas,
    M.miktar AS maasMiktari,
    M.tarih AS maasTarihi,
    I.baslangicTarihi AS izinBaslangic,
    I.bitisTarihi AS izinBitis
FROM
    Personel P
JOIN
    MaasOdeme M ON P.personelID = M.personelID
LEFT JOIN
    Izinler I ON P.personelID = I.personelID
ORDER BY
    P.personelID;
SELECT
    D.departmanID,
    D.departmanAdi,
    P.personelID,
    P.adi,
    P.soyadi,
    M.miktar AS maasMiktari,
    M.tarih AS maasTarihi
FROM
    Departmanlar D
JOIN
    Personel P ON D.departmanID = P.departmanID
JOIN
    MaasOdeme M ON P.personelID = M.personelID
ORDER BY
    D.departmanID, P.personelID, M.tarih;

SELECT
    D.departmanID,
    D.departmanAdi,
    P.personelID,
    P.adi,
    P.soyadi,
    I.baslangicTarihi AS izinBaslangic,
    I.bitisTarihi AS izinBitis,
    I.ucretliMi
FROM
    Departmanlar D
JOIN
    Personel P ON D.departmanID = P.departmanID
JOIN
    Izinler I ON P.personelID = I.personelID
ORDER BY
    D.departmanID, P.personelID, I.baslangicTarihi;

SELECT
    D.departmanID,
    D.departmanAdi,
    P.personelID,
    P.adi,
    P.soyadi,
    MZ.zammID,
    MZ.miktar AS zamMiktari,
    MZ.tarih AS zamTarihi
FROM
    Departmanlar D
JOIN
    Personel P ON D.departmanID = P.departmanID
JOIN
    MaasZamlari MZ ON P.personelID = MZ.personelID
ORDER BY
    D.departmanID, P.personelID, MZ.tarih;




CREATE OR REPLACE PROCEDURE ListDepartmanPersonelMaaş (
    p_departmanID IN NUMBER
) AS
    CURSOR c_personeller IS
        SELECT
            P.personelID,
            P.adi,
            P.soyadi,
            M.miktar AS maas
        FROM
            Personel P
        JOIN
            MaasOdeme M ON P.personelID = M.personelID
        WHERE
            P.departmanID = p_departmanID;
BEGIN
    FOR personel_rec IN c_personeller LOOP
        DBMS_OUTPUT.PUT_LINE('Personel ID: ' || personel_rec.personelID || ', Adı: ' || personel_rec.adi || ', Soyadı: ' || personel_rec.soyadi || ', Maaş: ' || personel_rec.maas);
    END LOOP;
END;
/

BEGIN
    ListDepartmanPersonelMaaş(1);
END;
/


CREATE OR REPLACE PROCEDURE ListPersonelMaasZamlari (
    p_personelID IN NUMBER
) AS
    CURSOR c_zamlar IS
        SELECT
            zammID,
            miktar,
            tarih
        FROM
            MaasZamlari
        WHERE
            personelID = p_personelID;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Personel ID: ' || p_personelID);
    FOR zam_rec IN c_zamlar LOOP
        DBMS_OUTPUT.PUT_LINE('Zam ID: ' || zam_rec.zammID || ', Miktar: ' || zam_rec.miktar || ', Tarih: ' || zam_rec.tarih);
    END LOOP;
END;
/

BEGIN
    ListPersonelMaasZamlari(1);
END;
/


CREATE OR REPLACE PROCEDURE ListPersonelMaasOdemeleri (
    p_personelID IN NUMBER
) AS
    CURSOR c_odemeler IS
        SELECT
            maasID,
            miktar,
            tarih
        FROM
            MaasOdeme
        WHERE
            personelID = p_personelID;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Personel ID: ' || p_personelID);
    FOR odeme_rec IN c_odemeler LOOP
        DBMS_OUTPUT.PUT_LINE('Ödeme ID: ' || odeme_rec.maasID || ', Miktar: ' || odeme_rec.miktar || ', Tarih: ' || odeme_rec.tarih);
    END LOOP;
END;
/

BEGIN
    ListPersonelMaasOdemeleri(1);
END;
/

CREATE OR REPLACE PROCEDURE ListPersonelAvanslari (
    p_personelID IN NUMBER
) AS
    CURSOR c_avanslar IS
        SELECT
            avansID,
            miktar,
            tarih
        FROM
            Avans
        WHERE
            personelID = p_personelID;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Personel ID: ' || p_personelID);
    FOR avans_rec IN c_avanslar LOOP
        DBMS_OUTPUT.PUT_LINE('Avans ID: ' || avans_rec.avansID || ', Miktar: ' || avans_rec.miktar || ', Tarih: ' || avans_rec.tarih);
    END LOOP;
END;
/


BEGIN
    ListPersonelAvanslari(1);
END;
/


CREATE OR REPLACE FUNCTION GetPersonelToplamAvans (
    p_personelID IN NUMBER
) RETURN NUMBER AS
    v_toplamAvans NUMBER := 0;
BEGIN
    SELECT
        NVL(SUM(miktar), 0)
    INTO
        v_toplamAvans
    FROM
        Avans
    WHERE
        personelID = p_personelID;

    RETURN v_toplamAvans;
END;
/

-- 1. Personelin Toplam Avansını Hesaplayan Fonksiyon Kullanımı
DECLARE
    v_toplamAvans NUMBER;
BEGIN
    v_toplamAvans := GetPersonelToplamAvans(1); -- Personel ID'sini belirtin
    DBMS_OUTPUT.PUT_LINE('Toplam Avans: ' || v_toplamAvans);
END;
/


CREATE OR REPLACE FUNCTION GetPersonelToplamIzinGunleri (
    p_personelID IN NUMBER
) RETURN NUMBER AS
    v_toplamIzin NUMBER := 0;
BEGIN
    SELECT
        NVL(SUM(bitisTarihi - baslangicTarihi + 1), 0)
    INTO
        v_toplamIzin
    FROM
        Izinler
    WHERE
        personelID = p_personelID;

    RETURN v_toplamIzin;
END;
/

DECLARE
    v_personelID NUMBER := 1; -- İlgili personel ID'sini belirtin
    v_toplamIzin NUMBER;
BEGIN
    v_toplamIzin := GetPersonelToplamIzinGunleri(v_personelID);
    DBMS_OUTPUT.PUT_LINE('Personel ID: ' || v_personelID || ', Toplam Kullandığı İzin Günleri: ' || v_toplamIzin);
END;
/


CREATE OR REPLACE FUNCTION GetPersonelNetIzinGunleri1 (
    p_personelID IN NUMBER
) RETURN NUMBER AS
    v_toplamIzin NUMBER := 0;
    v_ucretliIzin NUMBER := 0;
    v_netIzin NUMBER := 0;
BEGIN
    -- Toplam izin günlerini hesapla
    SELECT
        NVL(SUM(bitisTarihi - baslangicTarihi + 1), 0)
    INTO
        v_toplamIzin
    FROM
        Izinler
    WHERE
        personelID = p_personelID;

    -- Ücretli izin günlerini hesapla
    SELECT
        NVL(SUM(bitisTarihi - baslangicTarihi + 1), 0)
    INTO
        v_ucretliIzin
    FROM
        Izinler
    WHERE
        personelID = p_personelID
        AND ucretliMi = 'TRUE';

    -- Net izin günlerini hesapla
    v_netIzin := v_toplamIzin - v_ucretliIzin;

    RETURN v_netIzin;
END;
/

DECLARE
    v_personelID NUMBER := 4; -- İlgili personel ID'sini belirtin
    v_netIzin NUMBER;
BEGIN
    v_netIzin := GetPersonelNetIzinGunleri1(v_personelID);
    DBMS_OUTPUT.PUT_LINE('Personel ID: ' || v_personelID || ', Net İzin Günleri: ' || v_netIzin);
END;
/



CREATE OR REPLACE FUNCTION GetPersonelNetMaas (
    p_personelID IN NUMBER
) RETURN NUMBER AS
    v_aylikMaas NUMBER := 0;
    v_toplamAvans NUMBER := 0;
    v_netMaas NUMBER := 0;
BEGIN
    -- Aylık maaşı hesapla
    SELECT
        NVL(MAX(miktar), 0)
    INTO
        v_aylikMaas
    FROM
        MaasOdeme
    WHERE
        personelID = p_personelID;

    -- Toplam avansı hesapla
    SELECT
        NVL(SUM(miktar), 0)
    INTO
        v_toplamAvans
    FROM
        Avans
    WHERE
        personelID = p_personelID;

    -- Net maaşı hesapla
    v_netMaas := v_aylikMaas - v_toplamAvans;

    RETURN v_netMaas;
END;
/


DECLARE
    v_personelID NUMBER := 1; -- İlgili personel ID'sini belirtin
    v_netMaas NUMBER;
BEGIN
    v_netMaas := GetPersonelNetMaas(v_personelID);
    DBMS_OUTPUT.PUT_LINE('Personel ID: ' || v_personelID || ', Net Maaş: ' || v_netMaas);
END;
/


CREATE OR REPLACE TRIGGER DogumTarihiKontrolTrigger
BEFORE INSERT OR UPDATE ON Personel
FOR EACH ROW
DECLARE
    v_guncelTarih DATE := SYSDATE;
BEGIN
    -- Eklenen veya güncellenen doğum tarihi şu andan büyükse exception fırlat
    IF :NEW.dogumTarihi > v_guncelTarih THEN
        RAISE_APPLICATION_ERROR(-20006, 'Personelin doğum tarihi şu andan büyük olamaz.');
    END IF;
END;
/



CREATE OR REPLACE TRIGGER MaasZammiTrigger
AFTER INSERT ON MaasZamlari
FOR EACH ROW
BEGIN
    -- Yeni bir maaş zammı yapıldığında, Personel tablosundaki mevcut maaşı güncelle
    UPDATE Personel
    SET mevcutMaas = mevcutMaas + :NEW.miktar
    WHERE personelID = :NEW.personelID;

END;
/






CREATE OR REPLACE TRIGGER YillikIzinKontrolTrigger
BEFORE INSERT ON YillikIzinler
FOR EACH ROW
DECLARE
    v_toplamKullanilanIzin NUMBER;
    v_yillikIzinHakki NUMBER;
BEGIN
    -- Personelin toplam kullanılan izin miktarını al
    SELECT NVL(SUM(bitisTarihi - baslangicTarihi + 1), 0)
    INTO v_toplamKullanilanIzin
    FROM YillikIzinler
    WHERE personelID = :NEW.personelID;

    -- Personelin yıllık izin hakkını al
    SELECT topalmYillikIzinHakki
    INTO v_yillikIzinHakki
    FROM Personel
    WHERE personelID = :NEW.personelID;

    -- Toplam kullanılan izin miktarı, yıllık izin hakkından fazlaysa exception fırlat
    IF v_toplamKullanilanIzin + (:NEW.bitisTarihi - :NEW.baslangicTarihi + 1) > v_yillikIzinHakki THEN
        RAISE_APPLICATION_ERROR(-20001, 'Personelin yıllık izin hakkı aşıldı.');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER AvansKontrolTrigger
BEFORE INSERT ON Avans
FOR EACH ROW
DECLARE
    v_personelMaas NUMBER;
BEGIN
    -- Personelin mevcut maaşını al
    SELECT mevcutMaas
    INTO v_personelMaas
    FROM Personel
    WHERE personelID = :NEW.personelID;

    -- Eklenen avans miktarı, personel maaşından büyükse exception fırlat
    IF :NEW.miktar > v_personelMaas THEN
        RAISE_APPLICATION_ERROR(-20002, 'Personelin maaşından büyük avans eklenemez.');
    END IF;
END;
/
CREATE OR REPLACE PROCEDURE YATIR_MAAS_JOB AS
BEGIN
    FOR rec IN (SELECT personelID FROM Personel) LOOP
        -- Personelin net maaşını al
        DECLARE
            v_netMaas NUMBER;
        BEGIN
            v_netMaas := GetPersonelNetMaas(rec.personelID);

            -- Net maaşı MaasOdeme tablosuna ekle
            BEGIN
                INSERT INTO MaasOdeme (maasID, personelID, miktar, tarih)
                VALUES (MaasOdemeSeq.NEXTVAL, rec.personelID, v_netMaas, SYSTIMESTAMP);

                -- Opsiyonel: İşlemi izlemek için çıktı ver
                DBMS_OUTPUT.PUT_LINE('Personel ID ' || rec.personelID || ' için maaş yatırıldı. Net Maaş: ' || v_netMaas);
            END;
        END;
    END LOOP;
END;
/

BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'MAAS_YATIRMA_JOB',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN YATIR_MAAS_JOB; END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=MONTHLY; BYMONTHDAY=25', -- Her ayın 25'inde çalışacak
        enabled         => TRUE
    );
END;
/

CREATE OR REPLACE PROCEDURE YILLIK_ZAM_JOB AS
BEGIN
    FOR rec IN (SELECT personelID FROM Personel) LOOP
        -- Personelin mevcut maaşını al
        DECLARE
            v_mevcutMaas NUMBER;
        BEGIN
            SELECT mevcutMaas INTO v_mevcutMaas FROM Personel WHERE personelID = rec.personelID;

            -- Yıllık zammı hesapla (örneğin, %5)
            BEGIN
                DECLARE
                    v_yillikZamOrani NUMBER := 0.05; -- %5 zam
                    v_yillikZamMiktari NUMBER;
                BEGIN
                    v_yillikZamMiktari := v_mevcutMaas * v_yillikZamOrani;

                    -- Yıllık zammı MaasZamlari tablosuna ekle
                    BEGIN
                        INSERT INTO MaasZamlari (zammID, personelID, miktar, tarih)
                        VALUES (MaasZamlariSeq.NEXTVAL, rec.personelID, v_yillikZamMiktari, SYSTIMESTAMP);

                        -- Opsiyonel: İşlemi izlemek için çıktı ver
                        DBMS_OUTPUT.PUT_LINE('Personel ID ' || rec.personelID || ' için yıllık zam uygulandı. Zam Miktarı: ' || v_yillikZamMiktari);
                    END;
                END;
            END;
        END;
    END LOOP;
END;
/

BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'YILLIK_ZAM_JOB',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN YILLIK_ZAM_JOB; END;',
        start_date      => TO_TIMESTAMP('2024-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),
        repeat_interval => 'FREQ=YEARLY; BYMONTH=1; BYMONTHDAY=1; BYHOUR=0', -- Her yılın 1 Ocak günü çalışacak
        enabled         => TRUE
    );
END;
/